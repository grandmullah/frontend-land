{"version":3,"sources":["components/navbar.js","components/government.js","components/search.js","components/default.js","components/Home.js","App.js","serviceWorker.js","index.js"],"names":["navbar","react_default","a","createElement","className","Button","outline","color","NavLink","to","Component","Registerland","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","GettxStatus","txHash","drizzleState","transactionStack","state","StackId","concat","transactions","status","_this$props","drizzle","landnumber","size","location","lat","log","title","handlelandnumber","bind","assertThisInitialized","handlelandsize","handlelandlocation","handlelandlat","handlelandlog","handlelandfile","handleSubmit","event","setState","target","value","console","stackId","contracts","Lands","methods","cacheSend","Container","Row","Col","onSubmit","Form_default","Group","as","Label","column","sm","Control","type","onChange","block","React","search","page","Home","newContextComponents","AccountData","ContractData","ContractForm","drizzle_react","Consumer","drizzleContext","initialized","navbar_navbar","Switch","Route","exact","path","render","government_Registerland","assign","component","Search","Default","options","land","drizzleStore","generateStore","Drizzle","App","Provider","BrowserRouter","Boolean","window","hostname","match","ReactDOM","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.7536d79b.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { NavLink } from 'react-router-dom'\r\nimport { Button } from 'reactstrap';\r\nimport './components.css'\r\n\r\nexport default class navbar extends Component {\r\n  \r\n  render () {\r\n    return (\r\n      <div className='navbar'>\r\n        <Button outline color='link'>\r\n          <NavLink to='/'className='button'>HOME</NavLink>\r\n        </Button>\r\n        <Button outline color='link'>\r\n          <NavLink to='/Government' className='button'>GOVERNMENT</NavLink> \r\n        </Button>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { Container, Row, Col, Button } from 'reactstrap'\r\nimport Form from 'react-bootstrap/Form'\r\n\r\nexport default class Registerland extends React.Component {\r\n  constructor (props) {\r\n    super(props)\r\n    const { drizzle, drizzleState } = this.props\r\n    this.state = { landnumber: '', size: '', location: '', lat: '', log: '', title: '', StackId: null }\r\n    this.handlelandnumber = this.handlelandnumber.bind(this)\r\n    this.handlelandsize = this.handlelandsize.bind(this)\r\n    this.handlelandlocation = this.handlelandlocation.bind(this)\r\n    this.handlelandlat = this.handlelandlat.bind(this)\r\n    this.handlelandlog = this.handlelandlog.bind(this)\r\n    this.handlelandfile = this.handlelandfile.bind(this)\r\n    this.handleSubmit = this.handleSubmit.bind(this)\r\n  }\r\n  handlelandnumber (event) {\r\n    this.setState({ landnumber: event.target.value })\r\n  }\r\n  handlelandsize (event) {\r\n    console.log('size')\r\n  }\r\n  handlelandlocation (event) {\r\n    console.log('location')\r\n  }\r\n  handlelandlat (event) {\r\n    console.log('lat')\r\n  }\r\n  handlelandlog (event) {\r\n    console.log('log')\r\n  }\r\n  handlelandfile (event) {\r\n    console.log('file')\r\n  }\r\n  handleSubmit (event) {\r\n   \r\n    const contract = this.props.drizzle.contracts.Lands\r\n    const stackId = contract.methods['registerLand'].cacheSend(this.state.landnumber, this.state.size, this.props.location,this.state.lat  )\r\n    this.setState({ StackId: stackId })\r\n  }\r\n  GettxStatus = () => {\r\n    const txHash = this.props.drizzleState.transactionStack(this.state.StackId)\r\n    if(!txHash) return null\r\n    return `Transaction status: ${this.props.drizzleState.transactions[txHash] && this.props.drizzleState.transactions[txHash].status}`\r\n  }\r\n  render () {\r\n    return (\r\n      <div>\r\n        <Container className='gov'>\r\n          <Row>\r\n            <Col>\r\n            </Col>\r\n            <Col >\r\n              <div>\r\n                <h2> Register Land </h2>\r\n                <div>\r\n                  <form onSubmit={this.handleSubmit}>\r\n                    <Form.Group as={Row} >\r\n                      <Form.Label column sm={3} >LandNumber:</Form.Label>\r\n                      <Col>\r\n                        <Form.Control type='text' onChange={this.handlelandnumber} />\r\n                      </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row}>\r\n                      <Form.Label column sm={3} >Size:</Form.Label>\r\n                      <Col>\r\n                        <Form.Control type='text'onChange={this.handlelandsize} />\r\n                      </Col>\r\n                    </Form.Group>\r\n                    <Form.Group as={Row}>\r\n                      <Form.Label column sm={3} >Location</Form.Label>\r\n                      <Col>\r\n                        <Form.Control type='text' onChange={this.handlelandlocation} />\r\n                      </Col>\r\n                    </Form.Group>\r\n                    <Form.Row>\r\n                      <Form.Group as={Col}>\r\n                        <Form.Label >lat</Form.Label>\r\n                        <Form.Control type='text' onChange={this.handlelandlat} />\r\n                      </Form.Group>\r\n                      <Form.Group as={Col}>\r\n                        <Form.Label >log</Form.Label>\r\n                        <Form.Control type='text'onChange={this.handlelandlog} />\r\n                      </Form.Group>\r\n                    </Form.Row>\r\n                    <Form.Group>\r\n                      <Form.Label> Land Tittle Deed:</Form.Label>\r\n                      <Form.Control type='file' onChange={this.handlelandfile} />\r\n                    </Form.Group>\r\n                    <Form.Group>\r\n                      <Button type='submit' color='primary' size='lg' block> Register</Button>\r\n                    </Form.Group>\r\n                  </form>\r\n                </div>\r\n              </div>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class search extends Component {\r\n  render () {\r\n    return (\r\n      <div className='App'>\r\n        <h2>fuckkskaosla</h2>\r\n      </div>\r\n    )\r\n  }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class page extends Component {\r\n  render () {\r\n    return (\r\n      <div className='App'>\r\n      page not found</div>\r\n    )\r\n  }\r\n}\r\n","import React from 'react'\r\nimport { Switch, Route } from 'react-router-dom'\r\nimport { newContextComponents } from 'drizzle-react-components'\r\nimport { DrizzleContext } from 'drizzle-react'\r\nimport Navbar from './navbar'\r\nimport Gov from './government'\r\nimport Search from'./search'\r\nimport Default from './default'\r\nimport '../App.css'\r\nconst { AccountData, ContractData, ContractForm } = newContextComponents\r\n\r\nexport default () => (\r\n  <DrizzleContext.Consumer>\r\n    {drizzleContext => {\r\n      const { drizzle, drizzleState, initialized } = drizzleContext\r\n      console.log(drizzleState)\r\n      if (!initialized) {\r\n        return 'Loading...'\r\n      }\r\n      return (\r\n        <div>\r\n          <Navbar />\r\n          <Switch>\r\n            <Route exact path='/' />\r\n            <Route path='/Government' render={(props) => <Gov {...props} drizzle={drizzle} drizzleState={drizzleState} />} />\r\n            <Route path='/search' component={Search} />\r\n            <Route component={Default} />\r\n          </Switch>\r\n        </div>\r\n      )\r\n    }}\r\n  </DrizzleContext.Consumer>\r\n)\r\n","import React, { Component } from 'react'\nimport './App.css'\nimport { Drizzle, generateStore } from 'drizzle'\nimport { DrizzleContext } from 'drizzle-react'\n// import drizzleOptions from './components/options'\nimport land from './contracts/Lands.json'\nimport Home from './components/Home'\nimport { BrowserRouter } from 'react-router-dom'\nconst options = { contracts: [land] }\n\n// import Gov from './components/government'\nconst drizzleStore = generateStore(options)\nconst drizzle = new Drizzle(options, drizzleStore)\n\nexport default class App extends Component {\n  render () {\n    return (\n      <DrizzleContext.Provider drizzle={drizzle} >\n        <BrowserRouter>\n          <Home />\n        </BrowserRouter>\n      </DrizzleContext.Provider>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport 'bootstrap/dist/css/bootstrap.min.css'\nimport './index.css'\nimport './components/components.css'\nimport App from './App.js'\n\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'));\n    \n    // If you want your app to work offline and load faster, you can change\n    // unregister() to register() below. Note this comes with some pitfalls.\n    // Learn more about service workers: http://bit.ly/CRA-PWA\n    serviceWorker.unregister()\n"],"sourceRoot":""}